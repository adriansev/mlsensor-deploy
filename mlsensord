#!/bin/bash

#       /etc/rc.d/init.d/mlsensord
#
#       MLSensor agent for sending machine data to MonaLisa

# description[en]: MLSensor agent for sending machine data to MonaLisa
# processname: mlsensord
# chkconfig: 2345 20 80
# config: /etc/mlsensor/mlsensor.properties autoreload
# pidfile: /var/run/mlsensord.pid

# Source function library.
. /etc/init.d/functions

RETVAL="0"
USER="mlsensor"
MLSENSOR_HOME="/home/${USER}"
MLCFGDIR="/etc/mlsensor"
ML_CFG="${MLCFGDIR}/mlsensor.properties"
PIDFILE="/var/run/mlsensord.pid"
ML_JAR_DIR="/usr/share/java/mlsensor"

JAVA=$(/usr/bin/which java)
##-Xms32m
##-Xms64M -Xmx512M
JAVA_ARG=" \
-DMLSENSOR_HOME=/tmp \
-Djava.util.logging.config.class=lia.Monitor.monitor.LoggerConfigClass \
-Dlia.Monitor.ConfigURL=file:${ML_CFG} \
-jar ${ML_JAR_DIR}/MLSensor.jar"

JAVAD="${JAVA} ${JAVA_ARG}"

check_cfg() { [[ ! -e ${ML_CFG} ]] && { echo "Configuration file ${ML_CFG} not found! Use mlsensor_config to generate $(/bin/basename ${ML_CFG}) file in directory $(/usr/bin/dirname ${ML_CFG})" && return 1;}; }

version() {
        [[ -z "{JAVA}" ]] && { echo "java executable not found; check with \"/usr/bin/which java\"" && return 1; }
        echo -ne "MLSensor version : "
        ${JAVA} -Xmx2m -Xms2m -jar ${ML_JAR_DIR}/MLSensor.jar -version;
        echo
        echo -ne "Java version : "
        ${JAVA} -showversion 2>&1 | head -3
        return 0
}

start() {
        check_cfg && return $?
        LOGDIR=$(/usr/bin/dirname $(/bin/awk -F" = " '/java.util.logging.FileHandler.pattern/ {print $2}' ${ML_CFG}))
        echo -n "Starting mlsensord: "
        /usr/sbin/daemonize -v -o ${LOGDIR}/mlsensord.log -e ${LOGDIR}/mlsensord.log -u ${USER} -c /tmp/ -p ${PIDFILE} -l ${PIDFILE} ${JAVAD} 2>&1 >/dev/null
        RETVAL=$?
        [[ "${RETVAL}" -eq 0 ]] && success || failure
        echo
        return $RETVAL
}

stop() {
        echo -n "Shutting down mlsensord: "
        killproc -p ${PIDFILE}
        RETVAL=$?
        echo
        return $RETVAL
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status -p ${PIDFILE} -l ${PIDFILE}
        ;;
    restart)
        stop
        start
        ;;
    reload)
        stop
        start
        ;;
    version)
        version
        ;;
    *)
        echo "Usage: mlsensord {start|stop|status|restart}"
        exit 1
        ;;
esac
exit $?

